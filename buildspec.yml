version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
  
  pre_build:
    commands:
      - echo "Installing dependencies"
      - pip install -r requirements.txt

  build:
    commands:
      - echo "Checking if stack exists and is in ROLLBACK_COMPLETE state"
      - |
        if aws cloudformation describe-stacks --stack-name hit-counter-stack --region us-west-1 2>&1 | grep -q 'ROLLBACK_COMPLETE'; then
          echo "Deleting existing stack in ROLLBACK_COMPLETE state"
          aws cloudformation delete-stack --stack-name hit-counter-stack --region us-west-1
          aws cloudformation wait stack-delete-complete --stack-name hit-counter-stack --region us-west-1
        fi
      - echo "Building SAM application"
      - sam build --use-container
      - echo "Packaging SAM application"
      - sam package --s3-bucket ${DEPLOY_BUCKET} --output-template-file packaged.yaml
      - echo "Deploying SAM application"
      - sam deploy --template-file packaged.yaml --no-confirm-changeset --no-fail-on-empty-changeset --stack-name hit-counter-stack --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --region us-west-1
      
  post_build:
    commands:
      - echo "Retrieving API Gateway URL"
      - API_URL=$(aws cloudformation describe-stacks --stack-name hit-counter-stack --query 'Stacks[0].Outputs[?OutputKey==`HitCounterApiUrl`].OutputValue' --output text)
      - echo $API_URL > api_url.txt
      - aws s3 cp api_url.txt s3://cf-resume-site-share/api_url.txt
      - echo "API Gateway URL is $API_URL"
      - echo "Invalidating CloudFront cache"
      - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"

artifacts:
  files:
    - packaged.yaml
    - api_url.txt
  discard-paths: yes

cache:
  paths:
    - '/root/.cache/pip/**/*'